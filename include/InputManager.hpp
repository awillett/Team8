////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InputManager.hpp
// Robert M. Baker | Created : 15FEB12 | Last Modified : 16FEB12 by Robert M. Baker
// Version : 1.0.0
// This is a header file for 'Game'; it defines the interface for an input manager class.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
  * @file
  * @author  Robert M. Baker
  * @date    Created : 15FEB12
  * @date    Last Modified : 16FEB12 by Robert M. Baker
  * @version 1.0.0
  *
  * @brief This header file defines the interface for an input manager class.
  *
  * @section Description
  *
  * This header file defines the interface for an input manager class.
  */

#ifndef __QMX_GAME_INPUTMANAGER_HPP_
#define __QMX_GAME_INPUTMANAGER_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header Files
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <exception>
#include <OIS/OIS.h>

#include "Base.hpp"
#include "Singleton.hpp"

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Macros
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define INPUT_MANAGER          InputManager::GetSingleton()
#define INPUT_MANAGER_P        InputManager::GetSingletonPointer()
#define INPUT_MANAGER_KEYBOARD INPUT_MANAGER.GetKeyboard()
#define INPUT_MANAGER_MOUSE    INPUT_MANAGER.GetMouse()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start of the Game'' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// The 'InputManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
  * @class InputManager InputManager.hpp "include/InputManager.hpp"
  *
  * @brief This class defines algorithms for an input manager.
  *
  * These algorithms are useful when it is necessary to receive input from the user.
  *
  * Platform Independent     : Yes
  * Architecture Independent : Yes
  * Thread-Safe              : No
  */

class InputManager : public Singleton< InputManager >
{
public:

	// Public Constructors

		/**
		  * @brief This is the default constructor.
		  */

		InputManager();

	// Destructor

		/**
		  * @brief This is the destructor.
		  */

		virtual ~InputManager() noexcept;

	// Public Methods

		/**
		  * @brief This method initializes the input manager.
		  *
		  * @param WindowHandle
		  * 	This is a handle to the window from which the input manager will receive input.
		  *
		  * @exception std::exception
		  * 	If the input manager fails to initialize properly.
		  */

		void Initialize( const size_t WindowHandle );

		/**
		  * @brief This method shuts down the input manager.
		  */

		void Shutdown();

		/**
		  * @brief This method updates all input devices.
		  */

		void Update();

		/**
		  * @brief This obtains a non-mutable reference to the keyboard object.
		  */

		const OIS::Keyboard& GetKeyboard() const;

		/**
		  * @brief This obtains a non-mutable reference to the mouse object.
		  */

		const OIS::Mouse& GetMouse() const;

private:

	// Private Fields

		/**
		  * @brief This is the flag used to determine initialization state.
		  */

		bool Initialized;

		/**
		  * @brief This is a pointer to the input system.
		  */

		OIS::InputManager* SystemInstance;

		/**
		  * @brief This is a pointer to the keyboard object.
		  */

		OIS::Keyboard* KeyboardDevice;

		/**
		  * @brief This is a pointer to the mouse object.
		  */

		OIS::Mouse* MouseDevice;
};

} // 'Game' Namespace

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of the 'Game' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif // __QMX_GAME_INPUTMANAGER_HPP_

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of 'InputManager.hpp'
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
