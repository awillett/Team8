////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// AppManager.cpp
// Robert M. Baker | Created : 11MAR12 | Last Modified : 12MAR12 by Robert M. Baker
// Version : 1.0.0
// This is a source file for 'Game'; it defines the implementation for an application manager class.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
  * @file
  * @author  Robert M. Baker
  * @date    Created : 11MAR12
  * @date    Last Modified : 12MAR12 by Robert M. Baker
  * @version 1.0.0
  *
  * @brief This source file defines the implementation for an application manager class.
  *
  * @section Description
  *
  * This source file defines the implementation for an application manager class.
  */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header Files
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <AppManager.hpp>

using namespace std;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start of the 'Game' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Field Initializers for the 'AppManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<> AppManager* Singleton< AppManager >::SingletonInstance = nullptr;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Public Methods for the 'AppManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

AppManager::AppManager()
{
	// Initialize fields.

		Initialized = false;
}

AppManager::~AppManager() noexcept
{
	// Perform necessary cleanup.

		Deallocate();
}

void AppManager::Allocate()
{
	// Create local variables.

		//

	// Initialize application manager.

		if( !Initialized )
		{
			//

			Initialized = true;
		}
}

void AppManager::Deallocate()
{
	// Shutdown application manager.

		if( Initialized )
		{
			while( !States.empty() )
			{
				States.back()->Exit();
				States.pop_back();
			}

			Initialized = false;
		}
}

void AppManager::Start( AppState* Target )
{
	// Create local variables.

		bool IsDone = false;

		/* TEMP CODE START */
		ostringstream Buffer;
		/* TEMP CODE END */

	// Begin application manager's main loop.

		ChangeState( Target );

		if( Initialized )
		{
			do
			{
				PollStateRequest();
				AUDIOMANAGER.Update();
				VIDEOMANAGER.Update();
				States.back()->Logic();

				/* TEMP CODE START */
				Buffer.str( "" );
				Buffer << "Game : " << VIDEOMANAGER.GetFrameRate() << "FPS";
				glfwSetWindowTitle( Buffer.str().c_str() );

				if( glfwGetKey( GLFW_KEY_ESC ) || !glfwGetWindowParam( GLFW_OPENED ) )
					IsDone = true;
				/* TEMP CODE END */

			} while( !IsDone );
		}
}

void AppManager::ChangeState( AppState* Target )
{
	// Request the state be changed to specified state.

		NextStateTarget = Target;
		NextStateRequest = ChangeRequest;
}

void AppManager::PushState( AppState* Target )
{
	// Request specified state be pushed.

		NextStateTarget = Target;
		NextStateRequest = PushRequest;
}

void AppManager::PopState()
{
	// Request current state be popped, if there is more than one state in the state vector.

		if( States.size() > 1 )
			NextStateRequest = PopRequest;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Private Methods for the 'AppManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void AppManager::PollStateRequest()
{
	// Poll for state change request and take appropriate action.

		switch( NextStateRequest )
		{
			case ChangeRequest:
			{
				ChangeStateImp();

				break;
			}

			case PushRequest:
			{
				PushStateImp();

				break;
			}

			case PopRequest:
			{
				PopStateImp();

				break;
			}

			default:
			{
				// Do nothing.
			}
		}
}

void AppManager::ChangeStateImp()
{
	// Change to requested state after exiting current state, if necessary.

		if( !States.empty() )
		{
			States.back()->Exit();
			States.pop_back();
		}

		States.push_back( NextStateTarget );
		States.back()->Enter();
		NextStateRequest = NoRequest;
}

void AppManager::PushStateImp()
{
	// Push requested state after pausing current state.

		States.back()->Pause();
		States.push_back( NextStateTarget );
		States.back()->Enter();
		NextStateRequest = NoRequest;
}

void AppManager::PopStateImp()
{
	// Pop current state, and resume previous state.

		States.back()->Exit();
		States.pop_back();
		States.back()->Resume();
		NextStateRequest = NoRequest;
}

} // 'Game' Namespace

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of the 'Game' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of 'AppManager.cpp'
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
