////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// InputManager.cpp
// Robert M. Baker | Created : 15FEB12 | Last Modified : 15FEB12 by Robert M. Baker
// Version : 1.0.0
// This is a source file for 'Game'; it defines the implementation for an input manager class class.
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
  * @file
  * @author  Robert M. Baker
  * @date    Created : 15FEB12
  * @date    Last Modified : 15FEB12 by Robert M. Baker
  * @version 1.0.0
  *
  * @brief This source file defines the implementation for an input manager class.
  *
  * @section Description
  *
  * This source file defines the implementation for an input manager class.
  */

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Header Files
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <InputManager.hpp>

using namespace std;
using namespace OIS;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start of the 'Game' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

namespace Game
{

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Static Field Initializers for the 'InputManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

template<> InputManager* Singleton< InputManager >::SingletonInstance = nullptr;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Public Methods for the 'InputManager' Class
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

InputManager::InputManager()
{
	// Initialize fields.

		Initialized = false;
		SystemInstance = nullptr;
		KeyboardDevice = nullptr;
		MouseDevice = nullptr;
}

InputManager::~InputManager() noexcept
{
	// Perform necessary cleanup.

		Shutdown();
}

void InputManager::Initialize( const size_t WindowHandle )
{
	// Initialize input system.

		SystemInstance = OIS::InputManager::createInputSystem( WindowHandle );

		if( !SystemInstance )
			throw exception();

	// Initialize keyboard.

		KeyboardDevice = static_cast< Keyboard* >( SystemInstance->createInputObject( OISKeyboard, false ) );

		if( !KeyboardDevice )
			throw exception();

	// Initialize mouse.

		MouseDevice = static_cast< Mouse* >( SystemInstance->createInputObject( OISMouse, false ) );

		if( !MouseDevice )
			throw exception();

	// Set initialized flag.

		Initialized = true;
}

void InputManager::Shutdown()
{
	// Shutdown input system.

		if( Initialized )
		{
			SystemInstance->destroyInputObject( MouseDevice );
			MouseDevice = nullptr;
			SystemInstance->destroyInputObject( KeyboardDevice );
			KeyboardDevice = nullptr;
			OIS::InputManager::destroyInputSystem( SystemInstance );
			SystemInstance = nullptr;
			Initialized = false;
		}
}

void InputManager::Update()
{
	// Update all input devices.

		if( Initialized )
		{
			KeyboardDevice->capture();
			MouseDevice->capture();
		}
}

const OIS::Keyboard& InputManager::GetKeyboard() const
{
	// Return a non-mutable keyboard object reference to calling routine.

		return *KeyboardDevice;
}

const OIS::Mouse& InputManager::GetMouse() const
{
	// Return a non-mutable mouse object reference to calling routine.

		return *MouseDevice;
}

} // 'Game' Namespace

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of the 'Game' Namespace
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// End of 'InputManager.cpp'
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
